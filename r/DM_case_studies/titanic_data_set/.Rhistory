names(result_means)[i]
for(i in 2:ncol(result_means)) {
n <- names(result_means)[i]
new_name <- paste0(n, "_norm")
result_means[, new_name] <- normalizeThis(result_means[i])
}
result_means
data <- airquality
# mean by months
result_means <- data %>%
select(Ozone, Solar.R, Wind, Temp, Month) %>%
group_by(Month) %>%
summarise(Ozone_mean = mean(Ozone, na.rm = TRUE),
Solar.R_mean = mean(Solar.R, na.rm = TRUE),
Wind_mean = mean(Wind, na.rm = TRUE),
Temp_mean = mean(Temp, na.rm = TRUE))
# normalize
normalizeThis <- function(x) {
r <- (x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
r <- round(r * 5)
return(r)
}
for(i in 2:ncol(result_means)) {
n <- names(result_means)[i]
new_name <- paste0(n, "_norm")
result_means[, new_name] <- as.integer(normalizeThis(result_means[i]))
}
data <- airquality
str(data)
library(dplyr)
# mean by months
result_means <- data %>%
select(Ozone, Solar.R, Wind, Temp, Month) %>%
group_by(Month) %>%
summarise(Ozone_mean = mean(Ozone, na.rm = TRUE),
Solar.R_mean = mean(Solar.R, na.rm = TRUE),
Wind_mean = mean(Wind, na.rm = TRUE),
Temp_mean = mean(Temp, na.rm = TRUE))
# normalize
normalizeThis <- function(x) {
r <- (x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
r <- round(r * 5)
return(r)
}
for(i in 2:ncol(result_means)) {
n <- names(result_means)[i]
new_name <- paste0(n, "_norm")
result_means[, new_name] <- normalizeThis(result_means[i])
}
result_means
with(result_means, plot(Month, Ozone_mean_norm))
with(result_means, points(Month, Solar.R_mean_norm, col = "green"))
with(result_means, points(Month, Wind_mean_norm, col = "magenta"))
with(result_means, points(Month, Temp_mean_norm, col = "yellow"))
with(result_means, plot(Month, Ozone_mean_norm, col = "red", main = "Monthly normalized data"))
with(result_means, points(Month, Solar.R_mean_norm, col = "green"))
with(result_means, points(Month, Wind_mean_norm, col = "magenta"))
with(result_means, points(Month, Temp_mean_norm, col = "yellow"))
with(result_means, plot(Month, Ozone_mean_norm, col = "red", main = "Monthly normalized data", xlab = "measure"))
with(result_means, points(Month, Solar.R_mean_norm, col = "green"))
with(result_means, points(Month, Wind_mean_norm, col = "magenta"))
with(result_means, points(Month, Temp_mean_norm, col = "yellow"))
with(result_means, plot(Month, Ozone_mean_norm, col = "red", main = "Monthly normalized data", ylab = "measure"))
with(result_means, points(Month, Solar.R_mean_norm, col = "green"))
with(result_means, points(Month, Wind_mean_norm, col = "magenta"))
with(result_means, points(Month, Temp_mean_norm, col = "yellow"))
lm(Ozone_means_norm ~ Months)
lm(Ozone_mean_norm ~ Months)
lm(Ozone_mean_norm ~ Months, data = result_means)
lm(Ozone_mean_norm ~ Month, data = result_means)
lm(Ozone_mean_norm ~ Month + Solar.R_mean_norm, data = result_means)
abline(fit)
fit <- lm(Ozone_mean_norm ~ Month + Solar.R_mean_norm, data = result_means)
abline(fit)
lines(fit)
fit
fit$coefficients[0]
fit$coefficients[1]
line <- fit$coefficients[1] +
fit$coefficients[2] * result_means$Month +
fit$coefficients[3] * result_means$Solar.R_mean_norm
line
lines(Month, line, data = result_means)
lines(result_means$Month, line)
with(result_means, plot(Month, Ozone_mean_norm, col = "red", main = "Monthly normalized data", ylab = "measure"))
with(result_means, points(Month, Solar.R_mean_norm, col = "green"))
with(result_means, points(Month, Wind_mean_norm, col = "magenta"))
with(result_means, points(Month, Temp_mean_norm, col = "yellow"))
lines(result_means$Month, line)
with(data, boxplot(Ozone ~ Month))
with(data, boxplot(Ozone ~ Month, main = "Ozone by months", xlab = "Month", ylab = "Ozone"))
with(data, plot(Ozone, Wind))
table(data$Month)
levels(data$Month)
table(data$Month)
with(filter(data, Month = 5), points(Ozone, Wind, col = "red"))
with(filter(data, Month = 6), points(Ozone, Wind, col = "green"))
with(filter(data, Month = 7), points(Ozone, Wind, col = "magenta"))
with(filter(data, Month = 8), points(Ozone, Wind, col = "yellow"))
with(filter(data, Month == 5), points(Ozone, Wind, col = "red"))
with(filter(data, Month == 6), points(Ozone, Wind, col = "green"))
with(filter(data, Month == 7), points(Ozone, Wind, col = "magenta"))
with(filter(data, Month == 8), points(Ozone, Wind, col = "yellow"))
with(filter(data, Month == 9), points(Ozone, Wind, col = "gray"))
cor(data$Ozone, data$Solar.R)
corr(data$Ozone, data$Solar.R)
cor(data$Ozone, data$Solar.R)
?cor
data$Ozone,
data$Ozone
cor(data)
data
library(dremel, quietly = TRUE)
library(dremel, quietly = TRUE)
RequireInitGoogle()
con_d <- DremelConnect()
dset <- "icentral_dremel"
table <- "icentral_dremel.analytics_buganizer_data_child"
con_d <- DremelConnect()
DremelExecuteQuery(paste0("select count(*) from ", dset, ".", table), con_d)
dset <- "icentral_dremel"
table <- "analytics_buganizer_data_child"
con_d <- DremelConnect()
DremelExecuteQuery(paste0("select count(*) from ", dset, ".", table), con_d)
DremelExecuteQuery(paste0("select count(*) from ", dset, ".", table), con_d)
table <- "analytics_get_tickets_and_efforts_buganizer_data_child"
DremelExecuteQuery(paste0("select count(*) from ", dset, ".", table), con_d)
bug_child <- DremelExecuteQuery(paste0("select count(*) from ", dset, ".", table), con_d)
str(bug_child)
bug_child <- DremelExecuteQuery(paste0("select * from ", dset, ".", table), con_d)
str(bug_child)
getDremelData <- function(con, ds, tbl, cns_path) {
if(!is.na(tbl)) {
res <- DremelExecuteQuery(paste0("select * from ", ds, ".", tbl), con)
} else if(!is.na(cns_path)) {
res <- DremelExecuteQuery(paste0("define table tmp ", cns_path, ";",
"select * tmp;"))
} else {
res <- print("You cannot provide both \"tbl\" and \"cns_path\" arguments")
}
return(res)
}
getDremelData(con_d, dset, bug_child)
getDremelData(con_d, dset, tbl = bug_child)
cns_capacity <- "/cns/ie-d/home/icentral/analytics/generic/get_tickets_and_efforts/ic_capacity"
dset <- "icentral_dremel"
tbl_child <- "analytics_get_tickets_and_efforts_buganizer_data_child"
tbl_parent <- "analytics_get_tickets_and_efforts_buganizer_data_child"
cns_capacity <- "/cns/ie-d/home/icentral/analytics/generic/get_tickets_and_efforts/ic_capacity"
# FUNCTIONS ####
getDremelData(con_d, dset, tbl = bug_child)
DremelExecuteQuery(paste0("select * from ", dset, ".", tbl_child), con_d)
tbl_parent <- "analytics_get_tickets_and_efforts_buganizer_data_parent"
bug_parent <- DremelExecuteQuery(paste0("select * from ", dset, ".", tbl_parent), con_d)
bug_child <- DremelExecuteQuery(paste0("select * from ", dset, ".", tbl_child), con_d)
ic_cap <- DremelExecuteQuery(paste0("define table tmp ", cns_capacity, ";", "select * tmp;"))
ic_cap <- DremelExecuteQuery(paste0("define inline table tmp ", cns_capacity, ";", "select * tmp;"))
ic_cap <- DremelExecuteQuery(paste0("define table tmp ", cns_capacity, ";", "select * tmp;"))
?DremelAddTableDef
DremelAddTableDef("icentral_dremel.slechwar_test", cns_capacity, con_d)
DremelAddTableDef("icentral_dremel.slechwar_test", cns_capacity, con_d)
DremelExecuteQuery(paste0("select * from icentral_dremel.slechwar_test"), con_d)
bug_child <- DremelExecuteQuery(paste0("select * from ", dset, ".", tbl_child), con_d)
bug_parent <- DremelExecuteQuery(paste0("select * from ", dset, ".", tbl_parent), con_d)
DremelAddTableDef("ic_cap", cns_capacity, con_d)
ic_cap <- DremelExecuteQuery(paste0("select * ic_cap"), con_d)
ic_cap <- DremelExecuteQuery(paste0("select * from ic_cap"), con_d)
rm(list = ls())
# Libraries load
library(dremel, quietly = TRUE)
RequireInitGoogle()
# ENVIRONMENT ####
con_d <- DremelConnect()
dset <- "icentral_dremel"
tbl_child <- "analytics_get_tickets_and_efforts_buganizer_data_child"
tbl_parent <- "analytics_get_tickets_and_efforts_buganizer_data_parent"
cns_capacity <- "/cns/ie-d/home/icentral/analytics/generic/get_tickets_and_efforts/ic_capacity"
bug_child <- DremelExecuteQuery(paste0("select * from ", dset, ".", tbl_child), con_d)
bug_parent <- DremelExecuteQuery(paste0("select * from ", dset, ".", tbl_parent), con_d)
DremelAddTableDef("ic_cap", cns_capacity, con_d)
ic_cap <- DremelExecuteQuery(paste0("select * from ic_cap"), con_d)
View(bug_child)
View(ic_cap)
DremelAddInlineTableDef("ic_cap", cns_capacity, con_d)
con_d <- DremelConnect()
DremelAddInlineTableDef("ic_cap", cns_capacity, con_d)
DremelAddTableDef("ic_cap", cns_capacity, con_d)
ic_cap <- DremelExecuteQuery(paste0("select * from ic_cap"), con_d)
head(ic_cap)
ic_cap %>%
group_by(team) %>%
summarize(cap_sum = sum(capacity, na.rm = TRUE))
str(ic_cap)
ic_cap %>%
group_by(team, date_id) %>%
summarize(cap_sum = sum(capacity, na.rm = TRUE))
ic_cap %>%
group_by(date_id) %>%
summarize(cap_sum = sum(capacity, na.rm = TRUE))
ic_cap %>%
group_by(date_id, team) %>%
summarize(cap_sum = sum(capacity, na.rm = TRUE))
ic_cap_agg <- ic_cap %>%
group_by(date_id, team) %>%
summarize(cap_sum = sum(capacity, na.rm = TRUE))
head(ic_cap_agg, 30)
head(ic_cap_agg, 30)
View(ic_cap_agg)
str(bug_child)
bug_child$created_date
format(bug_child$created_date, "%y%m%d")
as.POSIXct(bug_child$created_date)
format(as.POSIXct(bug_child$created_date), "%y%m%d")
format(as.POSIXct(bug_child$created_date), "%yyyy%mm%dd")
format(as.POSIXct(bug_child$created_date), "%Y%mm%dd")
format(as.POSIXct(bug_child$created_date), "%Y%m%d")
bug_child[, "created_date_id"] <- format(as.POSIXct(bug_child$created_date), "%Y%m%d")
bug_parent[, "created_date_id"] <- format(as.POSIXct(bug_parent$created_date), "%Y%m%d")
ic_cap_agg <- ic_cap %>%
group_by(date_id, team) %>%
summarize(cap_sum = sum(capacity, na.rm = TRUE))
bug_child_sel <- bug_child %>%
select(created_date_id, verified_date_id, target_date_id, resolved_date_id, sprint, status, estimate, spent, priority, severity, team, type)
View(bug_child_sel)
DremelDisconnect(con_d)
# iCentral analytics
# Description: Cloud data transformation (reshape)
# Author: slechwar
# clear memory
rm(list = ls())
# libraries load
library(dremel, quietly = TRUE)
library(RMySQL, quietly = TRUE)
library(gfile, quietly = TRUE)
library(dplyr, quietly = TRUE)
library(cfs, quietly = TRUE)
library(columnio, quietly = TRUE)
RequireInitGoogle()
# FUNCTIONS ####
# Get task data
get_task_data <- function(year, quarter, task, task_only,
task_due_date, task_confidence, task_labels) {
sql <- paste0(
"
select
task.project_id as project_id,
task.tid as task_id,
if(quarterofyear(task.task_due_date) = ", quarter,
" and year(task.task_due_date) = ", year, ", concat(
ifnull(task.task, '-'), '\n',
ifnull(strftime_usec(task.task_due_date, '%m/%d'), '-'), ' | ',
if(task.task_status = 'Completed', 'Done',
ifnull(task.task_confidence, '-')))
, NULL)
as ", task, "
, if(quarterofyear(task.task_due_date) = ", quarter,
" and year(task.task_due_date) = ", year, ", ifnull(task.task, '-'), NULL)
as ", task_only, "
, if(quarterofyear(task.task_due_date) = ", quarter,
" and year(task.task_due_date) = ", year,
", ifnull(task.task_due_date, '-'), NULL)
as ", task_due_date , "
, if(quarterofyear(task.task_due_date) = ", quarter,
" and year(task.task_due_date) = ", year,
", ifnull(task.task_confidence, '-'), NULL)
as ", task_confidence, "
, if(quarterofyear(task.task_due_date) = ", quarter,
" and year(task.task_due_date) = ", year,
", ifnull(task.task_labels, '-'), NULL)
as ", task_labels, "
from (
select
cast(substr(entity, 1, 5) as integer) as project_id,
task_due_date,
tid,
task,
task_status,
task_confidence,
task_labels,
count(*) as count
from
(select * from  icentral_dremel.icentral_vit_56834),
(select * from icentral_dremel.icentral_vit_56835)
where (task_critical = '1'
and task_labels like '%EPoR%')
and cast(concat(cast(year(task_due_date) as string),
cast(quarterofyear(task_due_date) as string))
as int32) > 20163
group by project_id,
task_due_date,
tid,
task,
task_status,
task_confidence,
task_labels
) task
order by task.project_id,
task.task_due_date,
")
task_data <- con$ExecuteQuery(sql)
task_data <- as.data.frame(task_data[complete.cases(task_data[, task]),])
}
# Get number of tasks
number_of_tasks <- function(data) {
data_tasks_groups <- group_by(data, portfolio_id, program_id, project_id)
data_tasks <- summarise(data_tasks_groups, no_task = n())
return(data_tasks)
}
# Add tasks to data
add_tasks_to_data <- function (data_table, task_table, task_id_column,
task_due_date_column, task_labels_column) {
task_table[, "used"] <- 0
i <- 1
while(i <= nrow(data_table)) {
for(j in 1:nrow(task_table)) {
if(task_table[j, "used"] == 0) {
if(data_table[i, "project_id"] == task_table[j, "project_id"]) {
data_table[i, task_id_column] <- as.integer(task_table[j, "task_id"])
data_table[i, task_due_date_column] <- task_table[j,
task_due_date_column]
data_table[i, task_labels_column] <- task_table[j,
task_labels_column]
task_table[j, "used"] <- 1
break
}
}
next
}
i <- i + 1
}
return(data_table)
}
# ENVIRONMENT ####
# Connections
con <- DremelConnect()
con_ic <- list(
user = "root",
password = "",
dbname = "icentral")
socket_ro <-
"/cloudsql/google.com:icentral:us-central1:icentral-production-read2"
con_ro <- dbConnect(MySQL(),
unix.socket = socket_ro,
user = con_ic$user,
password = con_ic$password,
dbname = con_ic$dbname)
# RUN ####
t_start <- Sys.time()
print(paste0("ETL start: ", format(t_start, "%Y-%m-%d %H:%M:%S")))
# Geta data from plx
t_1 <- Sys.time()
print(paste0("Getting entity data from plx"))
sql <- paste0(
"
select cast(sa.portfolio_id as integer) as portfolio_id,
cast(sa.program_id as integer) as program_id,
cast(sa.project_id as integer) as project_id
from icentral_dremel.analytics_ppp_relations_single_accounting sa
inner join (
select cast(substr(entity, 1, 5) as integer) as project_id
from
(select * from icentral_dremel.icentral_vit_56834),
(select * from icentral_dremel.icentral_vit_56835)
group by project_id
) selected on selected.project_id = sa.project_id
inner join icentral_dremel.analytics_entity_desc e_p
on e_p.entity_id = sa.project_id
inner join icentral_dremel.analytics_entity_desc e_pp
on e_pp.entity_id = sa.program_id
inner join icentral_dremel.analytics_entity_desc e_ppp
on e_ppp.entity_id = sa.portfolio_id
where e_p.is_deleted = 0
and e_pp.is_deleted = 0
and e_ppp.is_deleted = 0
")
entity_data <- con$ExecuteQuery(sql)
t_2 <- Sys.time()
print(paste0("Duration: ",
round(as.numeric(t_2 - t_1, units = "secs")), " sec"))
# Get task data
t_3 <- Sys.time()
print(paste0("Getting task data from plx"))
task_2016_q4 <- get_task_data(2016, 4, "y2016q4", "y2016q4_task",
"y2016q4_due_date", "y2016q4_confidence",
"y2016q4_labels")
task_2017_q1 <- get_task_data(2017, 1, "y2017q1", "y2017q1_task",
"y2017q1_due_date", "y2017q1_confidence",
"y2017q1_labels")
task_2017_q2 <- get_task_data(2017, 2, "y2017q2", "y2017q2_task",
"y2017q2_due_date", "y2017q2_confidence",
"y2017q2_labels")
task_2017_q3 <- get_task_data(2017, 3, "y2017q3", "y2017q3_task",
"y2017q3_due_date", "y2017q3_confidence",
"y2017q3_labels")
task_2017_q4 <- get_task_data(2017, 4, "y2017q4", "y2017q4_task",
"y2017q4_due_date", "y2017q4_confidence",
"y2017q4_labels")
t_4 <- Sys.time()
print(paste0("Duration: ",
round(as.numeric(t_4 - t_3, units = "secs")), " sec"))
# Merge data with ppp ids
t_5 <- Sys.time()
print(paste0("Data merge and transformation"))
data_2016_q4 <- merge(entity_data, task_2016_q4, by.x = "project_id",
by.y = "project_id", all.x = TRUE)
data_2017_q1 <- merge(entity_data, task_2017_q1, by.x = "project_id",
by.y = "project_id", all.x = TRUE)
data_2017_q2 <- merge(entity_data, task_2017_q2, by.x = "project_id",
by.y = "project_id", all.x = TRUE)
data_2017_q3 <- merge(entity_data, task_2017_q3, by.x = "project_id",
by.y = "project_id", all.x = TRUE)
data_2017_q4 <- merge(entity_data, task_2017_q4, by.x = "project_id",
by.y = "project_id", all.x = TRUE)
# Number of tasks
data_no_task <- number_of_tasks(data_2016_q4)
names(data_no_task)[names(data_no_task) == "no_task"] <- "no_task_2016_q4"
data_no_task <- cbind(data_no_task, number_of_tasks(data_2017_q1))
names(data_no_task)[names(data_no_task) == "no_task"] <- "no_task_2017_q1"
data_no_task <- data_no_task[-c(5, 6, 7)]
data_no_task <- cbind(data_no_task, number_of_tasks(data_2017_q2))
names(data_no_task)[names(data_no_task) == "no_task"] <- "no_task_2017_q2"
data_no_task <- data_no_task[-c(6, 7, 8)]
data_no_task <- cbind(data_no_task, number_of_tasks(data_2017_q3))
names(data_no_task)[names(data_no_task) == "no_task"] <- "no_task_2017_q3"
data_no_task <- data_no_task[-c(7, 8, 9)]
data_no_task <- cbind(data_no_task, number_of_tasks(data_2017_q4))
names(data_no_task)[names(data_no_task) == "no_task"] <- "no_task_2017_q4"
data_no_task <- data_no_task[-c(8, 9, 10)]
data_no_task[, "max"] <- apply(data_no_task[, c("no_task_2016_q4",
"no_task_2017_q1",
"no_task_2017_q2",
"no_task_2017_q3",
"no_task_2017_q4")], 1, max)
# Export number of tasks to CNS
cns_path <-
"/cns/ie-d/home/icentral/analytics/case_specific/cloud/cloud_epor/no_of_tasks_per_quarter"
WriteColumnIO(x = data_no_task,
output.file = cns_path,
preserve.na = TRUE,
verbose = FALSE)
# Prepare table for ppp data
data <- data.frame(portfolio_id = integer(),
program_id = integer(),
project_id = integer())
for(i in 1:length(data_no_task[["project_id"]])) {
max_tasks <- as.list(data_no_task[i, "max"])
for(j in 1:max_tasks[[1]])
data <- rbind(data, as.data.frame(data_no_task[i, c("portfolio_id",
"program_id",
"project_id")]))
}
data <- add_tasks_to_data(data, task_2016_q4, "y2016q4_task_id",
"y2016q4_due_date", "y2016q4_labels")
data <- add_tasks_to_data(data, task_2017_q1, "y2017q1_task_id",
"y2017q1_due_date", "y2017q1_labels")
data <- add_tasks_to_data(data, task_2017_q2, "y2017q2_task_id",
"y2017q2_due_date", "y2017q2_labels")
data <- add_tasks_to_data(data, task_2017_q3, "y2017q3_task_id",
"y2017q3_due_date", "y2017q3_labels")
data <- add_tasks_to_data(data, task_2017_q4, "y2017q4_task_id",
"y2017q4_due_date", "y2017q4_labels")
# Change label from "EPoR" to "All"
data$y2016q4_labels <- gsub("EPoR", "All", data$y2016q4_labels)
data$y2017q1_labels <- gsub("EPoR", "All", data$y2017q1_labels)
data$y2017q2_labels <- gsub("EPoR", "All", data$y2017q2_labels)
data$y2017q3_labels <- gsub("EPoR", "All", data$y2017q3_labels)
data$y2017q4_labels <- gsub("EPoR", "All", data$y2017q4_labels)
View(data)
View(data)
View(data)
nrow(data)
setwd("/Users/slechwar/Google_Drive/04_Dev/R_cources/DM_case_studies")
getwd()
setwd("/usr/local/google/home/slechwar/Google_Drive/04_Dev/R_cources/DM_case_studies")
setwd("/usr/local/google/home/slechwar/Google Drive/04_Dev/R_cources/DM_case_studies")
list.files()
setwd("/usr/local/google/home/slechwar/Google Drive/04_Dev/R_cources/DM_case_studies/titanic_data_set")
list.files()
train <- read.csv("train.csv", na.strings = c(""), header = TRUE)
train
test <- read.csv("test.csv", na.strings = c(""), header = TRUE)
rm(list = ls())
setwd("/usr/local/google/home/slechwar/Google Drive/04_Dev/R_cources/DM_case_studies/titanic_data_set")
list.files()
gender_submission <- read.csv("gender_submission.csv", na.strings = c(""), header = TRUE)
train <- read.csv("train.csv", na.strings = c(""), header = TRUE)
test <- read.csv("test.csv", na.strings = c(""), header = TRUE)
train_raw <- read.csv("train.csv", na.strings = c(""), header = TRUE)
test_raw <- read.csv("test.csv", na.strings = c(""), header = TRUE)
gender_submission_raw <- read.csv("gender_submission.csv", na.strings = c(""), header = TRUE)
rm(list = ls())
#setwd("/Users/slechwar/Google_Drive/04_Dev/R_cources/DM_case_studies")
setwd("/usr/local/google/home/slechwar/Google Drive/04_Dev/R_cources/DM_case_studies/titanic_data_set")
list.files()
train_raw <- read.csv("train.csv", na.strings = c(""), header = TRUE)
test_raw <- read.csv("test.csv", na.strings = c(""), header = TRUE)
gender_submission_raw <- read.csv("gender_submission.csv", na.strings = c(""), header = TRUE)
sapply(train_raw, function(x), sum(is.na(x)))
sapply(train_raw, function(x) sum(is.na(x)))
sapply(train_raw, function(x) length(unique(x))) # check for NAs
colMeans(is.na(train_raw))
colMeans(is.na(train_raw)) * 100
rm(list = ls())
# Libraries load
library(dremel, quietly = TRUE)
library(dplyr, quietly = TRUE)
?dremel
?DremelDisconnect
?DremelDisconnect
con <- DremelConnect()
con <- DremelConnect()
con <- DremelConnect()
