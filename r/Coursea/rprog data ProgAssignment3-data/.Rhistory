is_valid_num_number
tmp <- arrange(tmp, measure, hospital_name)
tmp
tmp <- arrange(tmp, measure, hospital_name)
tmp[, "order"] <- order(tmp$measure)
tmp
tmp[is.na(tmp$measure), "order"] <- NA
tmp
select(filter(tmp, order == num), hospital_name, state)
data <- split(data, data$state)
output <- data.frame(state = unique(outcome[, "State"])) # at first, only list of states
#todo: iterate throuh all data (splitted states)
result <- data.frame(hospital_name = as.character(),
state = as.character())
data <- split(data, data$state)
output <- data.frame(state = unique(outcome[, "State"])) # at first, only list of states
#todo: iterate throuh all data (splitted states)
result <- data.frame(hospital_name = as.character(),
state = as.character())
data <- data.frame(hospital_name = outcome[, "Hospital.Name"],
state = outcome[, "State"],
measure = as.numeric(gsub("Not Available", NA, outcome[, measure_name])))
data <- split(data, data$state)
output <- data.frame(state = unique(outcome[, "State"])) # at first, only list of states
#todo: iterate throuh all data (splitted states)
result <- data.frame(hospital_name = as.character(),
state = as.character())
length(data)
for(i in 1:length(data)) {
#i <- 3
#----------------
tmp <- as.data.frame(data[i])
colnames(tmp) <- c("hospital_name", "state", "measure")
if(is_valid_num_best_worst) {
if(num == "best") {
tmp <- arrange(filter(tmp, !is.na(measure)), measure, hospital_name)
} else {
tmp <- arrange(filter(tmp, !is.na(measure)), desc(measure), hospital_name)
}
res <- tmp[1, c("hospital_name", "state")]
} else if(is_valid_num_number) { #OK
tmp <- arrange(tmp, measure, hospital_name)
tmp[, "order"] <- order(tmp$measure)
tmp[is.na(tmp$measure), "order"] <- NA
#arrange(tmp, desc(measure), hospital_name)[1, "order"] + 1
res <- select(filter(tmp, order == num), hospital_name, state)
}
result <- rbind(result, res)
}
result
for(i in 1:length(data)) {
#i <- 3
#----------------
tmp <- as.data.frame(data[i])
colnames(tmp) <- c("hospital_name", "state", "measure")
if(is_valid_num_best_worst) {
if(num == "best") {
tmp <- arrange(filter(tmp, !is.na(measure)), measure, hospital_name)
} else {
tmp <- arrange(filter(tmp, !is.na(measure)), desc(measure), hospital_name)
}
res <- tmp[1, c("hospital_name", "state")]
} else if(is_valid_num_number) { #OK
tmp <- arrange(tmp, measure, hospital_name)
tmp[, "order"] <- order(tmp$measure)
tmp[is.na(tmp$measure), "order"] <- NA
#arrange(tmp, desc(measure), hospital_name)[1, "order"] + 1
res <- select(filter(tmp, order == num), hospital_name, state)
}
result <- rbind(result, res)
}
result
num <- 40
for(i in 1:length(data)) {
#i <- 3
#----------------
tmp <- as.data.frame(data[i])
colnames(tmp) <- c("hospital_name", "state", "measure")
if(is_valid_num_best_worst) {
if(num == "best") {
tmp <- arrange(filter(tmp, !is.na(measure)), measure, hospital_name)
} else {
tmp <- arrange(filter(tmp, !is.na(measure)), desc(measure), hospital_name)
}
res <- tmp[1, c("hospital_name", "state")]
} else if(is_valid_num_number) { #OK
tmp <- arrange(tmp, measure, hospital_name)
tmp[, "order"] <- order(tmp$measure)
tmp[is.na(tmp$measure), "order"] <- NA
#arrange(tmp, desc(measure), hospital_name)[1, "order"] + 1
res <- select(filter(tmp, order == num), hospital_name, state)
}
result <- rbind(result, res)
}
result
output <- merge(result, output, by.x = "state", by.y = "state", all.y = T)
output
outcome_name <- "heart attack"
num <- "best"
data <- data.frame(hospital_name = outcome[, "Hospital.Name"],
state = outcome[, "State"],
measure = as.numeric(gsub("Not Available", NA, outcome[, measure_name])))
data <- split(data, data$state)
output <- data.frame(state = unique(outcome[, "State"])) # at first, only list of states
#todo: iterate throuh all data (splitted states)
result <- data.frame(hospital_name = as.character(),
state = as.character())
for(i in 1:length(data)) {
#i <- 3
#----------------
tmp <- as.data.frame(data[i])
colnames(tmp) <- c("hospital_name", "state", "measure")
if(is_valid_num_best_worst) {
if(num == "best") {
tmp <- arrange(filter(tmp, !is.na(measure)), measure, hospital_name)
} else {
tmp <- arrange(filter(tmp, !is.na(measure)), desc(measure), hospital_name)
}
res <- tmp[1, c("hospital_name", "state")]
} else if(is_valid_num_number) { #OK
tmp <- arrange(tmp, measure, hospital_name)
tmp[, "order"] <- order(tmp$measure)
tmp[is.na(tmp$measure), "order"] <- NA
#arrange(tmp, desc(measure), hospital_name)[1, "order"] + 1
res <- select(filter(tmp, order == num), hospital_name, state)
}
result <- rbind(result, res)
}
output <- merge(result, output, by.x = "state", by.y = "state", all.y = T)
output
outcome_name <- "heart attack"
num <- "best"
num
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome and num are valid
list_of_outcomes <- c("heart attack", "heart failure", "heart pneumonia")
list_of_rankings <- c("best", "worst")
is_valid_outcome <- !is.na(match(outcome_name, list_of_outcomes))
is_valid_num_best_worst <- !is.na(match(num, list_of_rankings))
is_valid_num_number <- is.numeric(num)
if(is_valid_outcome) {
paste0("Error in rankall: invalid outcome")
} else if(!is_valid_num_number && !is_valid_num_best_worst) {
paste0("Error in rankall: invalid result")
}
outcome_name <- "heart attack"
is_valid_outcome <- !is.na(match(outcome_name, list_of_outcomes))
is_valid_num_best_worst <- !is.na(match(num, list_of_rankings))
is_valid_num_number <- is.numeric(num)
if(is_valid_outcome) {
paste0("Error in rankall: invalid outcome")
} else if(!is_valid_num_number && !is_valid_num_best_worst) {
paste0("Error in rankall: invalid result")
}
if(!is_valid_outcome) {
paste0("Error in rankall: invalid outcome")
} else if(!is_valid_num_number && !is_valid_num_best_worst) {
paste0("Error in rankall: invalid result")
}
if(!is_valid_outcome) {
paste0("Error in rankall: invalid outcome")
} else if(!is_valid_num_number && !is_valid_num_best_worst) {
paste0("Error in rankall: invalid result")
}
if(!is_valid_outcome) {
paste0("Error in rankall: invalid outcome")
} else if(!is_valid_num_number && !is_valid_num_best_worst) {
paste0("Error in rankall: invalid result")
}
if(!is_valid_outcome) {
paste0("Error in rankall: invalid outcome")
} else if(!is_valid_num_number && !is_valid_num_best_worst) {
paste0("Error in rankall: invalid result")
}
if(!is_valid_outcome) {
paste0("Error in rankall: invalid outcome")
} else if(!is_valid_num_number && !is_valid_num_best_worst) {
paste0("Error in rankall: invalid result")
}
if(!is_valid_outcome) {
paste0("Error in rankall: invalid outcome")
} else if(!is_valid_num_number && !is_valid_num_best_worst) {
paste0("Error in rankall: invalid result")
}
if(outcome_name == "heart attack") {
measure_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if(outcome_name == "heart failure") {
measure_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if(outcome_name == "heart pneumonia") {
measure_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
measure_name
data <- data.frame(hospital_name = outcome[, "Hospital.Name"],
state = outcome[, "State"],
measure = as.numeric(gsub("Not Available", NA, outcome[, measure_name])))
data <- split(data, data$state)
output <- data.frame(state = unique(outcome[, "State"])) # at first, only list of states
result <- data.frame(hospital_name = as.character(),
state = as.character())
for(i in 1:length(data)) {
#i <- 3
#----------------
tmp <- as.data.frame(data[i])
colnames(tmp) <- c("hospital_name", "state", "measure")
if(is_valid_num_best_worst) {
if(num == "best") {
tmp <- arrange(filter(tmp, !is.na(measure)), measure, hospital_name)
} else {
tmp <- arrange(filter(tmp, !is.na(measure)), desc(measure), hospital_name)
}
res <- tmp[1, c("hospital_name", "state")]
} else if(is_valid_num_number) { #OK
tmp <- arrange(tmp, measure, hospital_name)
tmp[, "order"] <- order(tmp$measure)
tmp[is.na(tmp$measure), "order"] <- NA
#arrange(tmp, desc(measure), hospital_name)[1, "order"] + 1
res <- select(filter(tmp, order == num), hospital_name, state)
}
result <- rbind(result, res)
}
result
output <- merge(result, output, by.x = "state", by.y = "state", all.y = T)
output
num <- 30
num <- 30
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome and num are valid
list_of_outcomes <- c("heart attack", "heart failure", "heart pneumonia")
list_of_rankings <- c("best", "worst")
is_valid_outcome <- !is.na(match(outcome_name, list_of_outcomes))
is_valid_num_best_worst <- !is.na(match(num, list_of_rankings))
is_valid_num_number <- is.numeric(num)
if(!is_valid_outcome) {
paste0("Error in rankall: invalid outcome")
} else if(!is_valid_num_number && !is_valid_num_best_worst) {
paste0("Error in rankall: invalid result")
}
if(outcome_name == "heart attack") {
measure_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if(outcome_name == "heart failure") {
measure_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if(outcome_name == "heart pneumonia") {
measure_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
data <- data.frame(hospital_name = outcome[, "Hospital.Name"],
state = outcome[, "State"],
measure = as.numeric(gsub("Not Available", NA, outcome[, measure_name])))
data <- split(data, data$state)
output <- data.frame(state = unique(outcome[, "State"])) # at first, only list of states
#todo: iterate throuh all data (splitted states)
result <- data.frame(hospital_name = as.character(),
state = as.character())
for(i in 1:length(data)) {
#i <- 3
#----------------
tmp <- as.data.frame(data[i])
colnames(tmp) <- c("hospital_name", "state", "measure")
if(is_valid_num_best_worst) {
if(num == "best") {
tmp <- arrange(filter(tmp, !is.na(measure)), measure, hospital_name)
} else {
tmp <- arrange(filter(tmp, !is.na(measure)), desc(measure), hospital_name)
}
res <- tmp[1, c("hospital_name", "state")]
} else if(is_valid_num_number) { #OK
tmp <- arrange(tmp, measure, hospital_name)
tmp[, "order"] <- order(tmp$measure)
tmp[is.na(tmp$measure), "order"] <- NA
#arrange(tmp, desc(measure), hospital_name)[1, "order"] + 1
res <- select(filter(tmp, order == num), hospital_name, state)
}
result <- rbind(result, res)
}
output <- merge(result, output, by.x = "state", by.y = "state", all.y = T)
output
rankall <- function(outcome_name, num) {
# outcome > co chcemy zobaczyć spośród 3 możliwych
# num > czy chcemy zobaczyć najlepsze, najgorszsze czy o danym rankingu
# "remisty" tak samo jak w poprzednim (alfabetycznie)
# pokazujemy wartości dla wszystkich stanów, jeśli nie ma szpitala to NA
# walidacja tak samo jak w poprzednim
#-----------------------------------------
## Read outcome data
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome and num are valid
list_of_outcomes <- c("heart attack", "heart failure", "heart pneumonia")
list_of_rankings <- c("best", "worst")
is_valid_outcome <- !is.na(match(outcome_name, list_of_outcomes))
is_valid_num_best_worst <- !is.na(match(num, list_of_rankings))
is_valid_num_number <- is.numeric(num)
if(!is_valid_outcome) {
paste0("Error in rankall: invalid outcome")
} else if(!is_valid_num_number && !is_valid_num_best_worst) {
paste0("Error in rankall: invalid result")
} else {
## For each state, find the hospital of the given rank
if(outcome_name == "heart attack") {
measure_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if(outcome_name == "heart failure") {
measure_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if(outcome_name == "heart pneumonia") {
measure_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
data <- data.frame(hospital_name = outcome[, "Hospital.Name"],
state = outcome[, "State"],
measure = as.numeric(gsub("Not Available", NA, outcome[, measure_name])))
data <- split(data, data$state)
output <- data.frame(state = unique(outcome[, "State"])) # at first, only list of states
#todo: iterate throuh all data (splitted states)
result <- data.frame(hospital_name = as.character(),
state = as.character())
for(i in 1:length(data)) {
tmp <- as.data.frame(data[i])
colnames(tmp) <- c("hospital_name", "state", "measure")
if(is_valid_num_best_worst) {
if(num == "best") {
tmp <- arrange(filter(tmp, !is.na(measure)), measure, hospital_name)
} else {
tmp <- arrange(filter(tmp, !is.na(measure)), desc(measure), hospital_name)
}
res <- tmp[1, c("hospital_name", "state")]
} else if(is_valid_num_number) { #OK
tmp <- arrange(tmp, measure, hospital_name)
tmp[, "order"] <- order(tmp$measure)
tmp[is.na(tmp$measure), "order"] <- NA
#arrange(tmp, desc(measure), hospital_name)[1, "order"] + 1
res <- select(filter(tmp, order == num), hospital_name, state)
}
result <- rbind(result, res)
}
output <- merge(result, output, by.x = "state", by.y = "state", all.y = T)
## Return a data frame with the hospital names and the
## (abbreviated) state name
return(output)
}
}
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 2), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
tail(rankall("heart failure", 10), 10)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
best("SC", "heart attack")
best <- function(state, outcome_name) {
## Read outcome data
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
list_of_states <- unique(outcome[, "State"])
list_of_outcomes <- c("heart attack", "heart failure", "heart pneumonia")
is_valid_state <- match(state, list_of_states)
is_valid_outcome <- match(outcome_name, list_of_outcomes)
if(is.na(is_valid_state)) {
cat(paste0("Error in best(\"", state, "\", \"",
outcome_name, "\") : invalid state"))
} else if(is.na(is_valid_outcome)) {
cat(paste0("Error in best(\"", state, "\", \"",
outcome_name, "\") : invalid outcome"))
} else {
## Return hospital name in that state with lowest 30-day death
## rate
if(outcome_name == "heart attack") {
measure_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if(outcome_name == "heart failure") {
measure_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if(outcome_name == "heart pneumonia") {
measure_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
data <- data.frame(hospital_name = outcome[, "Hospital.Name"],
state = outcome[, "State"],
measure = as.numeric(gsub("Not Available", NA, outcome[, measure_name])))
data <- split(data, data$state)
data <- get(state, data)
data <- data[!is.na(data$measure), ]
result <- data[which.min(data$measure), ]
result <- as.vector(sort(result$hospital_name)[1])
if(length(result) == 0)
return(NA)
else
return(result)
}
}
rankhospital <- function(state, outcome_name, ranking) {
## Read outcome data
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state, outcome and ranking are valid
list_of_states <- unique(outcome[, "State"])
list_of_outcomes <- c("heart attack", "heart failure", "heart pneumonia")
list_of_rankings <- c("best", "worst")
is_valid_state <- match(state, list_of_states)
is_valid_outcome <- match(outcome_name, list_of_outcomes)
is_valid_ranking <- match(ranking, list_of_rankings)
if(is.na(is_valid_state)) {
cat(paste0("Error in best(\"", state, "\", \"", outcome_name, "\", \"",
ranking,  "\"): invalid state"))
} else if(is.na(is_valid_outcome)) {
cat(paste0("Error in best(\"", state, "\", \"", outcome_name, "\", \"",
ranking,  "\"): invalid outcome"))
} else if(!is.numeric(ranking) && is.na(is_valid_ranking)) {
cat(paste0("Error in best(\"", state, "\", \"", outcome_name, "\", \"",
ranking,  "\"): invalid result"))
} else {
## Return hospital name in that state with lowest 30-day death rate
if(outcome_name == "heart attack") {
measure_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if(outcome_name == "heart failure") {
measure_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if(outcome_name == "heart pneumonia") {
measure_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
data <- data.frame(hospital_name = outcome[, "Hospital.Name"],
state = outcome[, "State"],
measure = as.numeric(gsub("Not Available", NA, outcome[, measure_name])))
data <- split(data, data$state)
data <- get(state, data)
data <- data[!is.na(data$measure), ]
if(ranking == "best") {
result <- data[which.min(data$measure), ]
result <- as.vector(sort(result$hospital_name)[1])
} else if(ranking == "worst") {
result <- data[which.max(data$measure), ]
result <- as.vector(sort(result$hospital_name)[1])
} else {
result <- data[with(data, order(data$measure, data$hospital_name)), ]
result["unique_pos"] <- seq.int(1:nrow(result))
result <- as.vector(result[result$unique_pos == ranking, "hospital_name"])
}
if(length(result) == 0)
return(NA)
else
return(result)
}
}
rankall <- function(outcome_name, num) {
# outcome > co chcemy zobaczyć spośród 3 możliwych
# num > czy chcemy zobaczyć najlepsze, najgorszsze czy o danym rankingu
# "remisty" tak samo jak w poprzednim (alfabetycznie)
# pokazujemy wartości dla wszystkich stanów, jeśli nie ma szpitala to NA
# walidacja tak samo jak w poprzednim
#-----------------------------------------
## Read outcome data
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome and num are valid
list_of_outcomes <- c("heart attack", "heart failure", "heart pneumonia")
list_of_rankings <- c("best", "worst")
is_valid_outcome <- !is.na(match(outcome_name, list_of_outcomes))
is_valid_num_best_worst <- !is.na(match(num, list_of_rankings))
is_valid_num_number <- is.numeric(num)
if(!is_valid_outcome) {
paste0("Error in rankall: invalid outcome")
} else if(!is_valid_num_number && !is_valid_num_best_worst) {
paste0("Error in rankall: invalid result")
} else {
## For each state, find the hospital of the given rank
if(outcome_name == "heart attack") {
measure_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if(outcome_name == "heart failure") {
measure_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if(outcome_name == "heart pneumonia") {
measure_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
data <- data.frame(hospital_name = outcome[, "Hospital.Name"],
state = outcome[, "State"],
measure = as.numeric(gsub("Not Available", NA, outcome[, measure_name])))
data <- split(data, data$state)
output <- data.frame(state = unique(outcome[, "State"])) # at first, only list of states
#todo: iterate throuh all data (splitted states)
result <- data.frame(hospital_name = as.character(),
state = as.character())
for(i in 1:length(data)) {
tmp <- as.data.frame(data[i])
colnames(tmp) <- c("hospital_name", "state", "measure")
if(is_valid_num_best_worst) {
if(num == "best") {
tmp <- arrange(filter(tmp, !is.na(measure)), measure, hospital_name)
} else {
tmp <- arrange(filter(tmp, !is.na(measure)), desc(measure), hospital_name)
}
res <- tmp[1, c("hospital_name", "state")]
} else if(is_valid_num_number) { #OK
tmp <- arrange(tmp, measure, hospital_name)
tmp[, "order"] <- order(tmp$measure)
tmp[is.na(tmp$measure), "order"] <- NA
#arrange(tmp, desc(measure), hospital_name)[1, "order"] + 1
res <- select(filter(tmp, order == num), hospital_name, state)
}
result <- rbind(result, res)
}
output <- merge(result, output, by.x = "state", by.y = "state", all.y = T)
## Return a data frame with the hospital names and the
## (abbreviated) state name
return(output)
}
}
best("SC", "heart attack")
best("NY", "heart pneumonia")
best("AK", "heart pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "heart pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
